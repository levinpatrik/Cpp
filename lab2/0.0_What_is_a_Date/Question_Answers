0.1  MAKE IT HAPPEN  
--------------------------------------------------------------------------------
:::: What does `$*` mean inside a makefile?
--------------------------------------------------------------------------------

Answer: When you do %.out: %.cpp in the make file you turn all names of the cpp files into a "stem". This stem is reachable as a string through the macro $*.

--------------------------------------------------------------------------------
:::: What is the purpose of `-Wall` and -g, when passed as arguments to g++?
--------------------------------------------------------------------------------

Answer: -g: adds debugging information to the executable file. -Wall: Turns on MOST but not all compiling warnings. 

--------------------------------------------------------------------------------
:::: Is it possible to store the previous mentioned flags in a variable in
:::: the makefile?
--------------------------------------------------------------------------------

Answer: Yes it is possible to do this by defining it in the makefile! ex: CC = g++.

--------------------------------------------------------------------------------
:::: What is the difference between an object file, and an executable?
--------------------------------------------------------------------------------

Answer: Both object files and executables consists of blocks of machine code and data. Object files might have, however, references to external files that needs to be resolve. This is done by linking together multiple object files, resolving the reference problem, and making an executable (runnable by the computer) file.

--------------------------------------------------------------------------------







0.2.1  HELLO WORLD
-------------------------------------------------------------------------------
:::: If you invoke `touch hello.cpp` prior to invoking make;
        * How many files were rebuilt?
        * Why?
-------------------------------------------------------------------------------

Answer: After 'touch' on hello.cpp both files, hello.out & main.out, needs to be re-built. This is due to the dependencies of main.cpp (dependent on hello.o which is created by hello.cpp).

-------------------------------------------------------------------------------
:::: Why do you think `make` checks the modification timestamp of the
     relevant files as part of deciding what to do?
-------------------------------------------------------------------------------

Answer: It checks the timestamp of the latest modification and compairs it with the latest compile time. If the modification has been done after the last complile you need to re-compile that file (it might have changed).

-------------------------------------------------------------------------------









0.2.6  HELLO WORLD
-------------------------------------------------------------------------------
:::: What is the purpose of `std::cout`, `std::cerr`, and `std::clog`,
     respectively?
-------------------------------------------------------------------------------

Answer: They are all output streams, where clog and cout are buffered. That is the data is buffered before written to disk. This makes it very efficient since writing to the disk is useally slow. cerror does not buffer data which makes it slower but there are no risk that data is lost in case of a crash(nothing is waiting to be written to disk).

-------------------------------------------------------------------------------








0.3  TRAIN SPOTTING
-------------------------------------------------------------------------------
    int powerof (int x, int y) {
      int res = 1;

      for (int i = 0; i < y; ++i);
        res *= x;

      return res;
    }

    int main () {
      int const a = 2;
      int const b = 4;

      int   x = powerof(a, b); 
      float y = 3.1415;

      std::cout << a << "^" << b << " = " << x << ";\n";

      if (y == 3.1415)
        std::cout << y << " is equal to 3.1415!\n";
      else
        std::cout << y << " is not equal to 3.1415!\n";
    }

--------------------------------------------------------------------------------
:::: Why does not `powerof` return the expected value (16), when invoked with 2 and 4?
--------------------------------------------------------------------------------

Answer: The for-loop is supressed with ; and will only "execute" one loop. You would need to remove the ; and insert the next row in {}.

--------------------------------------------------------------------------------
:::: Why does not `y` compare equal to 3.1415?
--------------------------------------------------------------------------------

Answer: Becuase 3.1415 in the if statement is a double and is compaired to a float. 

--------------------------------------------------------------------------------
:::: Is there any difference in behavior if we compare `y` to 3.1415f, if so: why?
--------------------------------------------------------------------------------

Answer: You force 3.1415 to be a float in the statement making it float() == float()!

--------------------------------------------------------------------------------
:::: What is the recommended method to use when trying to determine if
:::: two floating-point values are equal, and why?
--------------------------------------------------------------------------------

Answer: You can multiply them so that they both become integers and then compair them. This remove the issue of different types compairing != when they contain the same number. (If you force a double to be a float you lose precision and two different values might == true) 

--------------------------------------------------------------------------------








0.4 DOES IT FIT
--------------------------------------------------------------------------------

int count_if_followed_by (char const * p, int len, char a, char b) {
  int        count = 0;
  char const * end = p + len;

  while (p != end) {
    if (*p == a && *(p+1) == b)
      count += 1;

    ++p;
  }

--------------------------------------------------------------------------------
:::: Why is it important to test the boundary conditions of an implementation,
:::: especially in the case of `count_if_followed_by`?
--------------------------------------------------------------------------------

Answer: Since its easy to forget the zero index when you use length(), sizeof(). If you loop through the whole length you will be doing it one time more than you should! This can lead to segmentation faults or accessing wrong memory.

--------------------------------------------------------------------------------










0.5 WILL IT FLOAT (birth.cpp)
--------------------------------------------------------------------------------
class A {
public:
   A () {
     std::cout << "default-constructor" << std::endl;
   }

   A (A const& src) {
     std::cout << "copy-constructor" << std::endl;
   }

  ~A () {
    std::cout << "destructor" << std::endl;
  }

   A(char const* s) {
      std::cout << "some other constructor" << std::endl;
   }

   A& operator= (A const& src) {
     std::cout << "the assignment operator" << std::endl;
     return *this;
   }
};

void no_ref(A a) {}
void with_ref(const A & a) {}

int main()
{
    A a("my name is a");

    A b = a;          // what is the difference
    A c(a);           // between these three
    A d;              // forms of initialization?

    d = a;

      no_ref (a);     // will this copy the value of `a`?
    with_ref (a);     // will this copy the value of `a`?

    A *aa = new A[5];
    delete aa;        // what will happen?
    return 0;
}

--------------------------------------------------------------------------------
:::: What different constructors are invoked, and when?
--------------------------------------------------------------------------------

Answer:
A a("my name is a"); => Some other constructor 
A b = a;             => Copy-constructor
A c(a);              => Copy-constructor
A d;                 => Defualt constructor
d = a;               => Assigment operator 

 no_ref (a);         =>  Copy-constructor. This one has to first copy a object of type A (to be sent to the function as a argument). Then when the functions scope ends the newly created object is deleted since it's not passed in the return. 

 A *aa = new A[5];   => Defualt constructor. This will call the defualt constructor since we create 5 new objects without passing any arguments. 

--------------------------------------------------------------------------------
:::: Will there be any temporaries created, if so; when?
--------------------------------------------------------------------------------

Answer:  

 A temporart object is an unnamed object created by the compiler when it needs a place to store a result from evaluating an expression. This is not the case in our program. 

--------------------------------------------------------------------------------
:::: When are the objects destructed, an why?
--------------------------------------------------------------------------------

Answer: 

 The first destructor is called when the copied object in function no_ref() runs out of scope. 

 After this 5 destructions occur when you invoke delete[]. (since you created 5 objects).

 Lastly the 4 objects created in main() a,b,c,d are deleted when main() runs out of scope. 



--------------------------------------------------------------------------------
:::: What will happen if we try to free the dynamically allocated
:::: memory through `delete p`, instead of `delete [] p`?

Answer:  Delete will have undefined behavior while delete[] will delete all objects and the pointer created by new [].

--------------------------------------------------------------------------------




0.5 WILL IT FLOAT (bad_plumming.cpp)
--------------------------------------------------------------------------------
struct Data {
    int x, y, z;
};  

Data ** foo(Data ** v, int x) {
    for (int i = 0; i < x; i++)
        if (v[i] != 0)
            v[i] = new Data;
    return v;
}

int main () {
    const int size = 5;
    Data ** v = new Data * [size];
    foo(v, size);
}

--------------------------------------------------------------------------------
:::: `valgrind` indicates that there is something wrong with
:::: `birth.cpp`; what, and why?
--------------------------------------------------------------------------------
Answer: When running it with the original code, 'delete', it says that the program is leaking memory. This is due to the incorrect use of new[]-> delete, it should be new[]->delete[].

--------------------------------------------------------------------------------
:::: valgrind indicates that the program suffers from a few problems, which and
:::: why?
--------------------------------------------------------------------------------

Answer: You allocat memory, Data ** v = new Data * [size]; , which is not deleted. 40 bytes in one block.

--------------------------------------------------------------------------------
:::: If you comment out the entire if-block in foo, is there any difference in
:::: how much memory that is leaked?
--------------------------------------------------------------------------------

Answer: No the memory loss will be the same but we avoid some errors by not compairing the if-statment. 

--------------------------------------------------------------------------------
:::: Revert bad_plumming.cpp to its original state, and comment out
:::: only the line that contains the if-condition.
::::
:::: If you now change the last line of `main` to the following; why is it
:::: that valgrind still issue diagnostics related to memory management?
::::
:::: Data ** p = foo (v, size);
:::: delete [] p;
--------------------------------------------------------------------------------

Answer: This will lead to an additonal indirect memorty loss (60 bytes) in 5 seperate blocks. This is due to the allocated memory in the foo(). When you free the container the indirect loss becomes a direct losss. You need to loop through the container to delete all objects. 

--------------------------------------------------------------------------------





0.6  THE SIMPLE CONTAINER
--------------------------------------------------------------------------------
:::: `operator[]` must in some cases be marked as `const`, but not always; when,
:::: and why?
--------------------------------------------------------------------------------

Answer: It depend on the context it is used. If you do : obj[1] = 13; you modify the obj so it can't be const. If you do int x = obj[1]; you don't need to modify obj so the operator can be const. 

--------------------------------------------------------------------------------
:::: The semantics of copying a UIntVector might not be trivial; why must we 
:::: manually implement the relevant code, instead of having the compiler generate
:::: it for us?
--------------------------------------------------------------------------------

Answer: If you let the compiler do an implicit copy-construtor the new object will not have its own vector with the same values. It will only point at the vector in the object that is beeing copied. This is not what we want!

--------------------------------------------------------------------------------



0.7  THE TEMPLATE VECTOR
--------------------------------------------------------------------------------
:::: Iterating over a range of elements can be done with a range-based for-loop,
:::: but the type of `source` must meet certain requirements; what are they?
--------------------------------------------------------------------------------

Answer: 1) A sequence whose range is defined by a begin() and end().
        2) Your itterators need to be the same datatype as the objects the range holds. 


--------------------------------------------------------------------------------
:::: The C++ Standard sometimes state that a type in the Standard Library is "unspecified"; why do you think that is?
--------------------------------------------------------------------------------

Answer1: It's common to do this to indicate that the typedef is available for use, but the type that it aliases depends on the implementation and isn't considered part of the public interface.

Answer2: Unspecified behavior use of an unspecified value, or other behavior where this International Standard provides two or more possibilities and imposes no further requirements on which is chosen in any instance

2 EXAMPLE An example of unspecified behavior is the order in which the arguments to a function are evaluated.

--------------------------------------------------------------------------------


1.2  THE DATE
--------------------------------------------------------------------------------
:::: Why can prefix increment/decrement be declared in the abstract base-class, but not :::: postfix?
--------------------------------------------------------------------------------
Answer: The postfix, a++, can't be in the base class since it returns a object and not a reference. This can't be done since:
 1) The base-class is pure-virtual
 2) You would slice away the derived class, not what you want. 

 


--------------------------------------------------------------------------------


----		0.0			----

1) Pros & Cons:

date <- Gregorian <- Julian:

1a)	This way of inherating is not optimal since Julian will have the specific implementations of Gregorian within it. This may not be nessasary or correct. 

1b)	The same problem arises when you do Date <- Julian <- Gregorian.

1c)	Date <- Gregorian, Julian

This approach seems better since you can have Date act as a abstract class. This will be like a blueprint for the rest of the calanders. This is good since both Gregorian and Julian is on the same level of abstraction and should not inherit from eachother (Gregorian is not a Julian).

1d)	We see no benefit of adding the middle part if we only deal with Gregorian and Julian. Maybe if there where a third calender that greatly differed from the two it would make more sence to have a middle part.


